#!/usr/bin/env ruby

require 'rubygems'
require 'getopt/std'
require 'yaml'
require 'zabbixapi'

opt = Getopt::Std.getopts("g:i:E:")

group_name = opt["g"]
interface_name = opt["i"]
zabbix_env = opt["E"]

template_name = "TMPL_Net_#{interface_name}"
app_name = "Net_#{interface_name}"


# read config
config = YAML::load(open('./config.yml'))

api_url = config[zabbix_env]["api_url"]
api_login = config[zabbix_env]["api_login"]
api_password = config[zabbix_env]["api_password"]

# Esablish new connection
zbx = Zabbix::ZabbixApi.new(api_url, api_login, api_password)

# Create new template
p " * Creating template #{template_name}."
g_id = zbx.add_or_get_group(group_name)

options = {
  'groups' => [ g_id.to_i ],
  'host' => template_name
}

t_id = zbx.add_or_get_template(options)

# Create application #{app_name}
p " ** Create application #{app_name}."
application = {
  'hostid' => t_id.to_i,
  'name' => app_name
}
a_id = zbx.add_or_get_application(t_id, application)

# 'Net #{interface_name} incoming traffic'
options = {
  'description' => "Net #{interface_name} incoming, B",
  'key_' => "net.if.in[#{interface_name}, bytes]",
  'hostid' => t_id.to_i,
  'applications' => [ a_id.to_i ],
  'history' => 7,
  'trends' => 30,
  'delay' => 60,
  'value_type' => 3,
  'units' => 'Bps',
  'value_type' => '3', # Numeric (unsigned)
  'delta' => 1 # Store as delta (Speed per second)
}
p " ** Add 'Net #{interface_name} incoming, B' to #{template_name}."
net_in_item_id = zbx.add_or_get_item(t_id, options)

# 'Net #{interface_name} outgoing traffic'
options = {
  'description' => "Net #{interface_name} outgoing, B",
  'key_' => "net.if.out[#{interface_name}, bytes]",
  'hostid' => t_id.to_i,
  'applications' => [ a_id.to_i ],
  'history' => 7,
  'trends' => 30,
  'delay' => 60,
  'value_type' => 3,
  'units' => 'Bps',
  'value_type' => '3', # Numeric (unsigned)
  'delta' => 1 # Store as delta (Speed per second)

}
p " ** Add 'Net #{interface_name} outgoing, B' to #{template_name}."
net_out_item_id = zbx.add_or_get_item(t_id, options)

# 'Net #{interface_name} incoming errors'
options = {
  'description' => "Net #{interface_name} incoming errors, pkts",
  'key_' => "net.if.in[#{interface_name}, errors]",
  'hostid' => t_id.to_i,
  'applications' => [ a_id.to_i ],
  'history' => 7,
  'trends' => 30,
  'delay' => 60,
  'value_type' => 0,
  'units' => 'pkts',
  'value_type' => '3'
}
p " ** Add 'Net #{interface_name} incoming errors, pkts' to #{template_name}."
net_in_errs_item_id = zbx.add_or_get_item(t_id, options)

# 'Net #{interface_name} incoming errors'
options = {
  'description' => "Net #{interface_name} outgoing errors, pkts",
  'key_' => "net.if.out[#{interface_name}, errors]",
  'hostid' => t_id.to_i,
  'applications' => [ a_id.to_i ],
  'history' => 7,
  'trends' => 30,
  'delay' => 60,
  'value_type' => 0,
  'units' => 'pkts',
  'value_type' => '3'
}
p " ** Add 'Net #{interface_name} outgoing errors, pkts' to #{template_name}."
net_out_errs_item_id = zbx.add_or_get_item(t_id, options)

# 'Net #{interface_name} incoming dropped pkts'
options = {
  'description' => "Net #{interface_name} incoming dropped, pkts",
  'key_' => "net.if.in[#{interface_name}, dropped]",
  'hostid' => t_id.to_i,
  'applications' => [ a_id.to_i ],
  'history' => 7,
  'trends' => 30,
  'delay' => 60,
  'value_type' => 0,
  'units' => 'pkts',
  'value_type' => '3'
}
p " ** Add 'Net #{interface_name} incoming dropped, pkts' to #{template_name}."
net_in_drop_item_id = zbx.add_or_get_item(t_id, options)

# 'Net #{interface_name} outgoing dropped pkts'
options = {
  'description' => "Net #{interface_name} outgoing dropped, pkts",
  'key_' => "net.if.out[#{interface_name}, dropped]",
  'hostid' => t_id.to_i,
  'applications' => [ a_id.to_i ],
  'history' => 7,
  'trends' => 30,
  'delay' => 60,
  'value_type' => 0,
  'units' => 'pkts',
  'value_type' => '3'
}
p " ** Add 'Net #{interface_name} outgoing dropped, pkts' to #{template_name}."
net_out_drop_item_id = zbx.add_or_get_item(t_id, options)

## GRAPHS
options = {
  "gitems" => [
    {   
      "itemid" => net_in_item_id,
      "drawtype" => "0",
      "sortorder" => "0",
      "color" => "AA0000",
      "yaxisside" => "0",
      "calc_fnc" => "2",
      "type" => "0",
      "periods_cnt" => "5" 
    },
    {   
      "itemid" => net_out_item_id,
      "drawtype" => "0",
      "sortorder" => "0",
      "color" => "009900",
      "yaxisside" => "0",
      "calc_fnc" => "2",
      "type" => "0",
      "periods_cnt" => "5" 
    },
    {   
      "itemid" => net_in_errs_item_id,
      "drawtype" => "0",
      "sortorder" => "0",
      "color" => "0000BB",
      "yaxisside" => "0",
      "calc_fnc" => "2",
      "type" => "0",
      "periods_cnt" => "5" 
    },
    {   
      "itemid" => net_out_errs_item_id,
      "drawtype" => "0",
      "sortorder" => "0",
      "color" => "888888",
      "yaxisside" => "0",
      "calc_fnc" => "2",
      "type" => "0",
      "periods_cnt" => "5" 
    },
    {   
      "itemid" => net_in_drop_item_id,
      "drawtype" => "0",
      "sortorder" => "0",
      "color" => "00BBBB",
      "yaxisside" => "0",
      "calc_fnc" => "2",
      "type" => "0",
      "periods_cnt" => "5" 
    },
    {   
      "itemid" => net_out_drop_item_id,
      "drawtype" => "0",
      "sortorder" => "0",
      "color" => "BB00BB",
      "yaxisside" => "0",
      "calc_fnc" => "2",
      "type" => "0",
      "periods_cnt" => "5" 
    }
  ],
  "show_triggers" => "0",
  "name" => "Network on #{interface_name}",
  "width" => "900",
  "height" => "200",
  "templateid" =>  "0" 
}

p " ** Add 'Network on #{interface_name} graph'"
g_id = zbx.add_or_get_graph(t_id, options)
